# app.py
import streamlit as st
import pandas as pd
import numpy as np
import re
import unicodedata
import os
import glob
from pathlib import Path

# [OPTIMIZED] Import c√°c th∆∞ vi·ªán ML/DL ·ªü ƒë√¢y
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from pyspark.sql import SparkSession
from pyspark.ml.recommendation import ALSModel

# ---------------- C·∫•u h√¨nh trang (Page Config) ----------------
st.set_page_config(
    page_title="Agoda Hotel Recommendation",
    page_icon="üè®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ---------------- [OPTIMIZED] H·∫±ng s·ªë v√† ƒë∆∞·ªùng d·∫´n ----------------
DATA_PATH = Path("./data")
MODEL_PATH = Path("./outputs/models")
HOTEL_INFO_FILE = DATA_PATH / "hotel_info.csv"
HOTEL_COMMENTS_FILE = DATA_PATH / "hotel_comments.csv"
ALS_MODEL_PATH = MODEL_PATH / "best_als_model"
D2V_EMBEDDINGS_FILE = MODEL_PATH / "d2v_emb.npy"
SBERT_EMBEDDINGS_FILE = MODEL_PATH / "sbert_emb.npy"


# ---------------- [OPTIMIZED] Qu·∫£n l√Ω Spark Session ----------------
def get_spark_session():
    """
    Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt SparkSession, cache trong st.session_state.
    """
    if "spark" not in st.session_state:
        st.session_state.spark = (
            SparkSession.builder
            .master("local[*]")
            .appName("AgodaALSApp")
            .config("spark.driver.memory", "4g")
            .config("spark.hadoop.fs.file.impl", "org.apache.hadoop.fs.RawLocalFileSystem")
            .config("spark.hadoop.fs.file.impl.disable.cache", "true")
            .getOrCreate()
        )
        # √âp l·∫°i c·∫•u h√¨nh trong HadoopConf ƒë·ªÉ ƒë·∫£m b·∫£o
        st.session_state.spark.sparkContext._jsc.hadoopConfiguration().set(
            "fs.file.impl", "org.apache.hadoop.fs.RawLocalFileSystem"
        )
    return st.session_state.spark

def _delete_crc_files(dir_path: str):
    """X√≥a c√°c file .crc checksum ƒë·ªÉ tr√°nh l·ªói khi Spark ƒë·ªçc t·ª´ local."""
    for fp in glob.glob(os.path.join(dir_path, "**", "*.crc"), recursive=True):
        try:
            os.remove(fp)
        except OSError as e:
            st.warning(f"Kh√¥ng th·ªÉ x√≥a file CRC {fp}: {e}")


# ---------------- C√°c h√†m t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu (gi·ªØ nguy√™n logic) ----------------
# C√°c h√†m g·ªëc ƒë∆∞·ª£c gi·ªØ nguy√™n, ch·ªâ th√™m cache v√†o session_state
def normalize_col(s: str) -> str:
    return re.sub(r'[^a-z0-9]+', '_', str(s).lower()).strip('_')

def auto_rename_columns(df: pd.DataFrame, wanted: dict) -> pd.DataFrame:
    norm_map = {normalize_col(c): c for c in df.columns}
    rename_dict = {}
    for target, cands in wanted.items():
        cands_norm = [normalize_col(x) for x in cands + [target]]
        for k in cands_norm:
            if k in norm_map:
                rename_dict[norm_map[k]] = target
                break
    if rename_dict:
        df = df.rename(columns=rename_dict)
    return df

def load_main_data():
    try:
        hotel_df = pd.read_csv(HOTEL_INFO_FILE, encoding="utf-8")
    except Exception:
        hotel_df = pd.read_csv(HOTEL_INFO_FILE, encoding="latin-1")
    hotel_df.columns = hotel_df.columns.str.strip()
    hotel_df = auto_rename_columns(
        hotel_df,
        {
            "Hotel_ID": ["hotel_id", "hotelid"], "Hotel_Name": ["hotel_name", "name"],
            "Hotel_Address": ["hotel_address", "address"], "Hotel_Description": ["hotel_description", "description"],
            "Image_URL": ["image_url", "image"], "Hotel_Rank": ["hotel_rank", "rank", "stars"],
            "Total_Score": ["total_score", "score"]
        }
    )
    if "Hotel_Description" not in hotel_df.columns:
        cols = [c for c in ["Hotel_Name", "Hotel_Address"] if c in hotel_df.columns]
        hotel_df["Hotel_Description"] = hotel_df[cols].astype(str).fillna("").agg(" ".join, axis=1) if cols else ""
    if "Total_Score" not in hotel_df.columns:
        hotel_df["Total_Score"] = np.random.uniform(7.5, 9.8, size=len(hotel_df)).round(1)

    try:
        comments_df = pd.read_csv(HOTEL_COMMENTS_FILE, encoding="utf-8")
    except Exception:
        comments_df = pd.read_csv(HOTEL_COMMENTS_FILE, encoding="latin-1")
    comments_df.columns = comments_df.columns.str.strip()
    comments_df = auto_rename_columns(comments_df, {"Reviewer_Name": ["reviewer_name", "user_name"], "Hotel_ID": ["hotel_id"]})
    
    # [FIX] Th√™m 2 d√≤ng sau ƒë·ªÉ l√†m s·∫°ch c·ªôt Reviewer_Name
    comments_df.dropna(subset=['Reviewer_Name'], inplace=True)
    comments_df['Reviewer_Name'] = comments_df['Reviewer_Name'].astype(str)

    missing = [c for c in ["Reviewer_Name", "Hotel_ID"] if c not in comments_df.columns]
    if missing:
        st.error(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc trong file `{HOTEL_COMMENTS_FILE.name}`: {', '.join(missing)}")
        st.stop()
        
    return hotel_df, comments_df

def create_tfidf_recommender(hotel_df):
    corpus = hotel_df["Hotel_Description"].astype(str).fillna("").apply(preprocess_text)
    tfidf = TfidfVectorizer(max_features=10000, ngram_range=(1, 2), min_df=2)
    tfidf_matrix = tfidf.fit_transform(corpus)
    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
    return tfidf, tfidf_matrix, cosine_sim

def load_embeddings(embedding_file):
    try:
        return np.load(embedding_file)
    except FileNotFoundError:
        st.warning(f"Kh√¥ng t√¨m th·∫•y file embedding t·∫°i: {embedding_file}")
        return None

def preprocess_text(text):
    if not isinstance(text, str): text = str(text)
    text = unicodedata.normalize("NFC", text.lower())
    text = re.sub(r"[^\w\s]", " ", text)
    text = re.sub(r"\s+", " ", text).strip()
    return text

def get_content_recommendations(hotel_index, sim_matrix, df, top_n=10):
    sim_scores = sorted(list(enumerate(sim_matrix[hotel_index])), key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n+1]
    hotel_indices = [i[0] for i in sim_scores]
    return df.iloc[hotel_indices]


# ---------------- [OPTIMIZED] H√†m kh·ªüi t·∫°o state ----------------
def initialize_session_state():
    """
    T·∫£i t·∫•t c·∫£ d·ªØ li·ªáu v√† model v√†o st.session_state ƒë·ªÉ tr√°nh t·∫£i l·∫°i.
    """
    if "initialized" in st.session_state:
        return

    with st.spinner("ƒêang chu·∫©n b·ªã d·ªØ li·ªáu v√† m√¥ h√¨nh cho l·∫ßn ƒë·∫ßu ti√™n..."):
        st.session_state.hotel_df, st.session_state.comments_df = load_main_data()
        
        # Content-based models
        tfidf_recommender = create_tfidf_recommender(st.session_state.hotel_df)
        st.session_state.tfidf_vectorizer = tfidf_recommender[0]
        st.session_state.tfidf_matrix = tfidf_recommender[1]
        st.session_state.tfidf_cosine_sim = tfidf_recommender[2]
        
        st.session_state.d2v_embeddings = load_embeddings(D2V_EMBEDDINGS_FILE)
        st.session_state.sbert_embeddings = load_embeddings(SBERT_EMBEDDINGS_FILE)
        
        # T·∫°o s·∫µn danh s√°ch hotel v√† user ƒë·ªÉ d√πng trong UI
        st.session_state.hotel_names = st.session_state.hotel_df['Hotel_Name'].unique()
        st.session_state.user_list = sorted(st.session_state.comments_df['Reviewer_Name'].unique())

    st.session_state.initialized = True
    st.success("S·∫µn s√†ng!", icon="‚úÖ")


# ---------------- [OPTIMIZED] Giao di·ªán hi·ªÉn th·ªã g·ª£i √Ω ----------------
def display_recommendation_list(df_recommendations):
    """
    Hi·ªÉn th·ªã danh s√°ch kh√°ch s·∫°n ƒë∆∞·ª£c g·ª£i √Ω v·ªõi giao di·ªán chuy√™n nghi·ªáp h∆°n.
    """
    if df_recommendations.empty:
        st.info("Kh√¥ng t√¨m th·∫•y g·ª£i √Ω n√†o ph√π h·ª£p.")
        return
    
    #     cols = st.columns(3) # T·∫°o 3 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã
    for i, row in enumerate(df_recommendations.iterrows()):
        index, data = row
        with cols[i % 3]: # L·∫ßn l∆∞·ª£t ƒëi·ªÅn v√†o t·ª´ng c·ªôt
            with st.container(border=True):
                st.image(data.get('Image_URL', 'https://i.imgur.com/uR3sYyP.jpeg'), use_column_width=True)
                
                st.subheader(data['Hotel_Name'])
                st.caption(f"üìç {data.get('Hotel_Address', 'N/A')}")
                
                metric_cols = st.columns(2)
                with metric_cols[0]:
                    st.metric(label="‚≠ê H·∫°ng", value=f"{data.get('Hotel_Rank', 'N/A')}")
                with metric_cols[1]:
                    st.metric(label="üíØ ƒêi·ªÉm", value=f"{data.get('Total_Score', 'N/A')}")
                
                with st.expander("Xem m√¥ t·∫£"):
                    st.write(data.get('Hotel_Description', 'Kh√¥ng c√≥ m√¥ t·∫£.'))


# ---------------- [OPTIMIZED] C√°c h√†m render cho t·ª´ng trang ----------------
def render_page_by_description():
    st.header("üîé T√¨m ki·∫øm theo m√¥ t·∫£ kh√°ch s·∫°n")
    st.write("Nh·∫≠p nh·ªØng ti·ªán √≠ch ho·∫∑c ƒë·∫∑c ƒëi·ªÉm b·∫°n mong mu·ªën, h·ªá th·ªëng s·∫Ω t√¨m c√°c kh√°ch s·∫°n ph√π h·ª£p nh·∫•t.")
    
    search_query = st.text_input(
        "V√≠ d·ª•: kh√°ch s·∫°n c√≥ h·ªì b∆°i cho gia ƒë√¨nh, g·∫ßn trung t√¢m, y√™n tƒ©nh",
        placeholder="Nh·∫≠p m√¥ t·∫£ c·ªßa b·∫°n ·ªü ƒë√¢y...",
        label_visibility="collapsed"
    )
    
    if search_query:
        with st.spinner("ƒêang t√¨m nh·ªØng kh√°ch s·∫°n ph√π h·ª£p nh·∫•t..."):
            query_vec = st.session_state.tfidf_vectorizer.transform([preprocess_text(search_query)])
            sim_scores = cosine_similarity(query_vec, st.session_state.tfidf_matrix).flatten()
            top_indices = sim_scores.argsort()[-9:][::-1] # L·∫•y 9 g·ª£i √Ω
            recommendations = st.session_state.hotel_df.iloc[top_indices]
        
        st.markdown("---")
        st.subheader("üèÜ K·∫øt qu·∫£ g·ª£i √Ω h√†ng ƒë·∫ßu")
        display_recommendation_list(recommendations)

def render_page_by_name():
    st.header("üè® T√¨m kh√°ch s·∫°n t∆∞∆°ng t·ª±")
    st.write("Ch·ªçn m·ªôt kh√°ch s·∫°n b·∫°n ƒë√£ t·ª´ng th√≠ch, h·ªá th·ªëng s·∫Ω g·ª£i √Ω nh·ªØng n∆°i c√≥ ƒë·∫∑c ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng.")

    col1, col2 = st.columns([2, 1])
    with col1:
        selected_hotel_name = st.selectbox(
            "Ch·ªçn m·ªôt kh√°ch s·∫°n b·∫°n ƒë√£ th√≠ch:",
            st.session_state.hotel_names,
            index=None,
            placeholder="T√¨m ki·∫øm kh√°ch s·∫°n..."
        )
    with col2:
        method = st.selectbox(
            "Ch·ªçn m√¥ h√¨nh g·ª£i √Ω:",
            ["TF-IDF", "Doc2Vec", "SBERT"]
        )

    if selected_hotel_name:
        selected_hotel_index = st.session_state.hotel_df[st.session_state.hotel_df['Hotel_Name'] == selected_hotel_name].index[0]
        
        with st.spinner(f"ƒêang t√¨m c√°c kh√°ch s·∫°n t∆∞∆°ng t·ª± b·∫±ng {method}..."):
            recommendations = pd.DataFrame()
            sim_matrix = None

            if method == "TF-IDF":
                sim_matrix = st.session_state.tfidf_cosine_sim
            elif method == "Doc2Vec" and st.session_state.d2v_embeddings is not None:
                sim_matrix = cosine_similarity(st.session_state.d2v_embeddings)
            elif method == "SBERT" and st.session_state.sbert_embeddings is not None:
                sim_matrix = cosine_similarity(st.session_state.sbert_embeddings)
            
            if sim_matrix is not None:
                recommendations = get_content_recommendations(selected_hotel_index, sim_matrix, st.session_state.hotel_df, top_n=9)
        
        st.markdown("---")
        st.subheader(f"Top 9 g·ª£i √Ω t∆∞∆°ng t·ª± '{selected_hotel_name}'")
        display_recommendation_list(recommendations)

def render_page_by_als():
    st.header("üë§ G·ª£i √Ω c√° nh√¢n h√≥a (M√¥ h√¨nh ALS)")
    st.info("S·ª≠ d·ª•ng thu·∫≠t to√°n ALS tr√™n Spark ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω d·ª±a tr√™n l·ªãch s·ª≠ ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng.")

    # [OPTIMIZED] Th√™m √¥ t√¨m ki·∫øm ƒë·ªÉ l·ªçc user
    search_user = st.text_input("T√¨m ki·∫øm t√™n kh√°ch h√†ng:", placeholder="Nh·∫≠p t√™n ƒë·ªÉ t√¨m...")
    if search_user:
        filtered_users = [user for user in st.session_state.user_list if search_user.lower() in user.lower()]
    else:
        filtered_users = st.session_state.user_list

    selected_user = st.selectbox("Ch·ªçn m·ªôt kh√°ch h√†ng ƒë·ªÉ xem g·ª£i √Ω:", filtered_users, index=None, placeholder="Ch·ªçn m·ªôt kh√°ch h√†ng...")

    if selected_user and st.button(f"üöÄ L·∫•y g·ª£i √Ω cho {selected_user}", type="primary", use_container_width=True):
        with st.spinner("ƒêang kh·ªüi t·∫°o Spark v√† t√≠nh to√°n g·ª£i √Ω..."):
            try:
                spark = get_spark_session()
                
                # T·∫°o mapping ƒë·ªÉ chuy·ªÉn ƒë·ªïi t√™n user v√† hotel_id sang index s·ªë
                user_map = pd.DataFrame({'Reviewer_Name': st.session_state.comments_df['Reviewer_Name'], 'userId': pd.factorize(st.session_state.comments_df['Reviewer_Name'])[0]}).drop_duplicates()
                item_map = pd.DataFrame({'itemId': pd.factorize(st.session_state.comments_df['Hotel_ID'])[0], 'Hotel_ID': st.session_state.comments_df['Hotel_ID']}).drop_duplicates()
                
                selected_user_id = user_map[user_map['Reviewer_Name'] == selected_user]['userId'].iloc[0]
                selected_user_id = int(selected_user_id) # ƒê·∫£m b·∫£o l√† ki·ªÉu int chu·∫©n
                
                _delete_crc_files(str(ALS_MODEL_PATH.resolve()))
                model = ALSModel.load(ALS_MODEL_PATH.resolve().as_uri())
                
                user_df = spark.createDataFrame([(selected_user_id,)], ["userId"])
                recs_spark = model.recommendForUserSubset(user_df, 9).first()

                if recs_spark and recs_spark['recommendations']:
                    recs_list = [(row['itemId'], row['rating']) for row in recs_spark['recommendations']]
                    recs_df = pd.DataFrame(recs_list, columns=['itemId', 'Predicted_Rating'])
                    
                    recs_df = recs_df.merge(item_map, on='itemId')
                    recs_df = recs_df.merge(st.session_state.hotel_df, on='Hotel_ID')
                    
                    st.markdown("---")
                    st.subheader(f"‚ú® G·ª£i √Ω d√†nh ri√™ng cho '{selected_user}'")
                    display_recommendation_list(recs_df)
                else:
                    st.warning(f"Kh√¥ng c√≥ g·ª£i √Ω n√†o cho kh√°ch h√†ng {selected_user}.")

            except Exception as e:
                st.error("C√≥ l·ªói x·∫£y ra khi ch·∫°y m√¥ h√¨nh ALS.")
                st.exception(e) # Hi·ªÉn th·ªã chi ti·∫øt l·ªói ƒë·ªÉ debug

# ---------------- Ch∆∞∆°ng tr√¨nh ch√≠nh ----------------
def main():
    st.title("üè® AGODA Hotel Recommendation System")
    st.caption("·ª®ng d·ª•ng g·ª£i √Ω kh√°ch s·∫°n s·ª≠ d·ª•ng c√°c m√¥ h√¨nh l·ªçc n·ªôi dung v√† l·ªçc c·ªông t√°c.")
    
    # [OPTIMIZED] Kh·ªüi t·∫°o d·ªØ li·ªáu v√† model m·ªôt l·∫ßn duy nh·∫•t
    initialize_session_state()

    with st.sidebar:
        st.image("logo.png", width=100)
        st.header("Ph∆∞∆°ng th·ª©c g·ª£i √Ω")
        
        page_options = {
            "Theo m√¥ t·∫£ kh√°ch s·∫°n": render_page_by_description,
            "Theo kh√°ch s·∫°n t∆∞∆°ng t·ª±": render_page_by_name,
            "Theo ƒë√°nh gi√° ng∆∞·ªùi d√πng (ALS)": render_page_by_als,
        }
        
        selected_page = st.radio(
            "Ch·ªçn trang:",
            options=page_options.keys(),
            label_visibility="collapsed"
        )
        
        st.markdown("---")
        st.header("V·ªÅ d·ª± √°n")
        st.info("ƒê√¢y l√† ƒë·ªì √°n t·ªët nghi·ªáp ·ª©ng d·ª•ng c√°c thu·∫≠t to√°n g·ª£i √Ω v√†o b√†i to√°n th·ª±c t·∫ø tr√™n d·ªØ li·ªáu t·ª´ Agoda.")
        if st.button("üîÑ Reset Spark Session"):
            if "spark" in st.session_state:
                st.session_state.spark.stop()
                del st.session_state.spark
                st.success("Spark session ƒë√£ ƒë∆∞·ª£c reset.")
                st.rerun()

    # [OPTIMIZED] G·ªçi h√†m render t∆∞∆°ng ·ª©ng v·ªõi trang ƒë√£ ch·ªçn
    page_options[selected_page]()

if __name__ == "__main__":
    main()

